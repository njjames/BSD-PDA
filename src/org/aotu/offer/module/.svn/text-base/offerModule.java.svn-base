package org.aotu.offer.module;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import org.aotu.Jsons;
import org.aotu.offsetPager;
import org.aotu.appointment.entity.Work_yuyue_pzEntity;
import org.aotu.offer.entity.LLEntity;
import org.aotu.offer.entity.baoJiaEntity;
import org.aotu.offer.entity.feilvEntity;
import org.aotu.offer.entity.offerEntity;
import org.aotu.offer.entity.wxxmEntity;
import org.aotu.order.entity.Work_ll_gzEntity;
import org.aotu.order.entity.Work_mx_gzEntity;
import org.aotu.order.entity.Work_pz_gzEntity;
import org.aotu.publics.eneity.KehuEntity;
import org.aotu.publics.eneity.Work_cheliang_smEntity;
import org.aotu.publics.module.publicModule;
import org.nutz.dao.Cnd;
import org.nutz.dao.ConnCallback;
import org.nutz.dao.Dao;
import org.nutz.dao.FieldFilter;
import org.nutz.dao.Sqls;
import org.nutz.dao.sql.Sql;
import org.nutz.dao.sql.SqlCallback;
import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.json.Json;
import org.nutz.json.JsonFormat;
import org.nutz.mvc.annotation.At;
import org.nutz.mvc.annotation.Ok;
import org.nutz.mvc.annotation.Param;
import org.nutz.trans.Atom;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import org.aotu.order.module.ordersModule;
/**
 * 
 * title:offerModuleJ
 * 
 * @Description:<描述>
 * @author Zhang Yalong
 * @date 2017-4-17 下午1:28:51
 * @version: V1.0
 */

@IocBean
@At("/offer")
public class offerModule {

	@Inject
	Dao dao;

	@Inject
	Jsons jsons;

	@Inject
	ordersModule ordersModule;
	
	@Inject
	publicModule pu;

	/**
	 * 快速报价
	 * 
	 * @param pai
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String story(String pai) {
		List<offerEntity> list = dao.query(offerEntity.class, null);
		String json = Json.toJson(list, JsonFormat.full());
		if (list.size() != 0) {
			return jsons.json(1, list.size(), 1, json);
		}
		return jsons.json(1, list.size(), 0, json);

	}

	private String getCatByPai(String pai) {
		Date date = new Date();
		short d = 1;
		Work_cheliang_smEntity res = dao.fetch(Work_cheliang_smEntity.class,
				Cnd.where("che_no", "=", pai));
		if (res == null) {
			res = new Work_cheliang_smEntity();
			res.setChe_no(pai);
			res.setKehu_no(pai);
			Work_cheliang_smEntity tr = dao.insert(res);
			KehuEntity ke = new KehuEntity();
			ke.setKehu_no(pai);
			ke.setLastModifyTime(date);
			ke.setKehu_xz(d);
			dao.insert(ke);
		}
		return res.getKehu_no();
	}

	/**
	 * 快速报价信息
	 * 
	 * @param pai
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String xinxi(String pai, String gongsiNo, String caozuoyuan_xm) {
		List<offerEntity> list;
		java.util.Calendar rightNow = java.util.Calendar.getInstance();
		java.text.SimpleDateFormat sim = new java.text.SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss");
		// 如果是后退几天，就写 -天数 例如：
		rightNow.add(java.util.Calendar.DAY_OF_MONTH, -20);
		// 进行时间转换
		String date = sim.format(rightNow.getTime());
		if (pai == null) {
			list = dao.query(offerEntity.class, null);
		} else {
			list = dao.query(offerEntity.class, Cnd.where("che_no", "=", pai)
					.and("List_progress","<>","已进店").and("List_progress","<>","已离店").and("List_progress","<>","已取消").and("list_jlrq", ">", date).desc("list_jlrq"));
			if (list.size() == 0) {
				String num = add(gongsiNo, caozuoyuan_xm);
				if (num != null) {
					offerEntity offer = new offerEntity();
					offer.setChe_no(pai);
					offer.setList_no(num);
					offer.setList_jlrq(new Date());
					offer.setKehu_no(getCatByPai(pai));
					// 查询建表需要的内容
					List<feilvEntity> fei = dao.query(feilvEntity.class,
							Cnd.where("feil_sy", "=", true));
					if (fei.size() < 0) {
						fei = dao.query(feilvEntity.class, Cnd.where("feil_mc", "=", "一级标准"));
					} 
					String mc = fei.get(0).getFeil_mc();
					double fl = fei.get(0).getFeil_fl();		
					offer.setList_sfbz(mc);
					offer.setList_sffl(fl);
					Work_cheliang_smEntity che = dao.fetch(Work_cheliang_smEntity.class, pai);
					if(che!=null){
						offer.setChe_cx(che.getChe_cx());		
						offer.setChe_vin(che.getChe_vin());
						offer.setChe_gcrq(che.getChe_gcrq());
						offer.setList_lc(che.getChe_next_licheng());
						KehuEntity kehu = dao.fetch(KehuEntity.class,che.getKehu_no());
						if(kehu!=null){
							offer.setKehu_mc(kehu.getKehu_mc());
							offer.setKehu_dh(kehu.getKehu_dh());
						}
					}
					int nu = dao.updateIgnoreNull(offer);
				}
			}
			list = dao.query(offerEntity.class, Cnd.where("che_no", "=", pai)
					.and("list_jlrq", ">", date).desc("list_jlrq"));
		}
		for(offerEntity o:list){
			Work_cheliang_smEntity ss = dao.fetch(Work_cheliang_smEntity.class, o.getChe_no());
			o.setChe_gcrq(ss.getChe_gcrq());
		}
		String json = Json.toJson(list, JsonFormat.full());
		if (list.size() != 0) {
			return jsons.json(1, list.size(), 1, json);
		}
		return jsons.json(1, list.size(), 0, json);
	}

	/**
	 * 项目
	 * 
	 * @param list_no
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String xiangm(String list_no) {
		List<wxxmEntity> list = dao.query(wxxmEntity.class,
				Cnd.where("list_no", "=", list_no));
		String json = Json.toJson(list, JsonFormat.full());
		if (list.size() != 0) {
			return jsons.json(1, list.size(), 1, json);
		}
		return jsons.json(1, list.size(), 0, json);

	}

	/**
	 * 材料
	 * 
	 * @param list_no
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String cail(String list_no) {
		List<LLEntity> list = dao.query(LLEntity.class,
				Cnd.where("list_no", "=", list_no));
		String json = Json.toJson(list, JsonFormat.full());
		if (list.size() != 0) {
			return jsons.json(1, list.size(), 1, json);
		}
		return jsons.json(1, list.size(), 0, json);
	}

	String number = null;

	@At
	@Ok("raw:json")
	public String jinchang(String no, String gongsiNo, String caozuoyuan_xm) {
		baoJiaEntity baoJia = dao.fetch(baoJiaEntity.class, no);
		// 新建一个接待登记单号
		String num = ordersModule.add(gongsiNo, caozuoyuan_xm);
		Work_pz_gzEntity pz_new = new Work_pz_gzEntity();
		pz_new.setWork_no(num);
		pz_new.setChe_no(baoJia.getChe_no());
		pz_new.setKehu_no(baoJia.getKehu_no());
		pz_new.setXche_jdrq(new Date());
		int nu = dao.updateIgnoreNull(pz_new);
		
		Work_pz_gzEntity pz = dao.fetch(Work_pz_gzEntity.class, num);
		
		pz.setYuyue_no(baoJia.getList_no());
		pz.setKehu_no(baoJia.getKehu_no());
		pz.setKehu_mc(baoJia.getKehu_mc());
		pz.setKehu_xm(baoJia.getKehu_xm());
		pz.setKehu_dz(baoJia.getKehu_dz());
		pz.setKehu_dh(baoJia.getKehu_dh());
		pz.setKehu_sj(baoJia.getKehu_sj());
		pz.setChe_zjno(baoJia.getChe_zjno());
		pz.setXche_gj(baoJia.getList_hjje());
		pz.setKehu_yb(baoJia.getKehu_yb());
		pz.setChe_no(baoJia.getChe_no());
		pz.setChe_vin(baoJia.getChe_vin());
		pz.setChe_fd(baoJia.getChe_fd());
		pz.setChe_cx(baoJia.getChe_cx());
		pz.setXche_jcr(baoJia.getList_jcr());
		try{
		pz.setXche_lc(Double.parseDouble(baoJia.getList_yjjclc()));
		}catch(java.lang.Exception e){
			
		}
		pz.setChe_wxys(baoJia.getChe_wxys());
		pz.setXche_gdfl(baoJia.getList_gdfl());
		pz.setXche_wxfl(baoJia.getList_wxfl());
		pz.setXche_sfbz(baoJia.getList_sfbz());
		pz.setXche_ywlx("报价转维修");
		pz.setFlag_pad(true);
		//pz.setXche_bz(pz.getXche_bz() + baoJia.getList_GuZhangMiaoShu());
		dao.update(pz);
		baoJia.setList_IsImpt(1);
		baoJia.setWork_no(num);

		pz_new.setFlag_pad(true);
		dao.update(baoJia);
		// 更新详情表
		Sql sql_ = Sqls
				.create("select list_no,a.peij_no,a.peij_mc,a.peij_dw,a.peij_jk,a.peij_th,a.peij_cx,a.peij_pp,a.peij_cd,a.peij_bz,peij_sl,peij_dj,peij_je,Peij_zt,b.peij_tcfs ,b.peij_tc   from work_baojia_ll a ,kucshp_info b  where a.list_no = '"
						+ no + "'and a.peij_no=b.peij_no");
		sql_.setCallback(new SqlCallback() {
			public Object invoke(Connection conn, java.sql.ResultSet rs, Sql sql)
					throws SQLException {
				List<Work_ll_gzEntity> list = new LinkedList<Work_ll_gzEntity>();
				while (rs.next()) {
					Work_ll_gzEntity ll = new Work_ll_gzEntity();
					// ll.setwork_no(num);
					ll.setPeij_no(rs.getString("Peij_no"));
					ll.setPeij_mc(rs.getString("peij_mc"));
					ll.setPeij_dw(rs.getString("peij_dw"));
					ll.setPeij_jk(rs.getString("peij_jk"));
					ll.setPeij_th(rs.getString("peij_th"));
					ll.setPeij_cx(rs.getString("peij_cx"));
					ll.setPeij_pp(rs.getString("peij_pp"));
					ll.setPeij_cd(rs.getString("peij_cd"));
					ll.setPeij_bz(rs.getString("peij_bz"));
					ll.setPeij_sl(rs.getDouble("peij_sl"));
					ll.setPeij_dj(rs.getDouble("peij_dj"));
					ll.setPeij_je(rs.getDouble("peij_je"));
					ll.setPeij_zt(rs.getString("peij_zt"));
					ll.setPeij_tcfs(rs.getInt("peij_tcfs"));
					ll.setPeij_tc(rs.getDouble("peij_tc"));
					ll.setPeij_yje(rs.getDouble("peij_je"));
					list.add(ll);
				}
				return list;
			}
		});
		dao.execute(sql_);
		List<Work_ll_gzEntity> list = sql_.getList(Work_ll_gzEntity.class);
		for (Work_ll_gzEntity llgz : list) {
			llgz.setWork_no(num);
			dao.insert(llgz);
		}
		// 结束
		// 更新详细表
		Sql sql_2 = Sqls
				.create("select a.wxxm_no,a.wxxm_mc,a.wxxm_gs,a.wxxm_dj,a.wxxm_je,a.wxxm_khgs,wxxm_zt,a.wxxm_bz,'正常',b.wxxm_tcfs,b.wxxm_tc from work_baojia_wxxm a ,work_weixiu_sm b where a.list_no = '"
						+ no + "' and a.wxxm_no= b.wxxm_no ");
		sql_2.setCallback(new SqlCallback() {
			public Object invoke(Connection conn, java.sql.ResultSet rs, Sql sql)
					throws SQLException {
				List<Work_mx_gzEntity> list_gz = new LinkedList<Work_mx_gzEntity>();
				while (rs.next()) {
					Work_mx_gzEntity mxgz = new Work_mx_gzEntity();
					mxgz.setWxxm_no(rs.getString("wxxm_no"));
					mxgz.setWxxm_mc(rs.getString("wxxm_mc"));
					mxgz.setWxxm_gs(rs.getDouble("wxxm_gs"));
					mxgz.setWxxm_dj(rs.getDouble("wxxm_dj"));
					mxgz.setWxxm_je(rs.getDouble("wxxm_je"));
					mxgz.setWxxm_khgs(rs.getDouble("wxxm_khgs"));
					mxgz.setWxxm_zt(rs.getString("wxxm_zt"));
					mxgz.setWxxm_bz(rs.getString("wxxm_bz"));
					mxgz.setWxxm_tpye("正常");
					mxgz.setWxxm_tcfs(rs.getInt("wxxm_tcfs"));
					mxgz.setWxxm_tc(rs.getDouble("wxxm_tc"));
					mxgz.setWxxm_yje(rs.getDouble("wxxm_je"));
					mxgz.setWxxm_Print(true);
					list_gz.add(mxgz);
				}
				return list_gz;
			}
		});
		dao.execute(sql_2);
		List<Work_mx_gzEntity> list_mx = sql_2.getList(Work_mx_gzEntity.class);
		for (Work_mx_gzEntity llgz : list_mx) {
			llgz.setWork_no(num);
			dao.insert(llgz);
		}
		// 结束
		
		Sql sql1 = Sqls
				.create("update work_pz_gz set mainstate=0,substate='未派车辆',xche_wxjd='在修',xche_jdrq=getdate() where work_no= '"
						+ num + "'");
		dao.execute(sql1);

		Sql sql2 = Sqls
				.create("update work_pz_gz set xche_wxsj = isnull(DATEDIFF(minute, xche_jdrq, xche_yjwgrq),0) where work_no= '"
						+ num + "'");
		dao.execute(sql2);

		Sql sql3 = Sqls
				.create("update work_mx_gz set wxxm_jd='未派工' where work_no= '"
						+ num + "'");
		dao.execute(sql3);

		Work_pz_gzEntity pz_ = dao.fetch(Work_pz_gzEntity.class, num);

		Sql sql4 = Sqls
				.create("update work_yuyue_pz set yuyue_progress='已进店',yuyue_sjjcrq=getdate() where yuyue_no= '"
						+ pz_.getYuyue_no() + "'");
		dao.execute(sql4); 

		Sql sql5 = Sqls
				.create("update work_baojia_pz set list_progress='已进店' where list_no=  '"
						+ pz_.getYuyue_no() + "'");
		dao.execute(sql5);

//		Sql sql6 = Sqls
//				.create("update work_cheliang_sm set che_rjlc = (xche_lc-xche_last_lc)/ case isnull(convert(numeric(18,2), xche_jdrq - xche_last_jdrq),0) when 0 then 1 else isnull(convert(numeric(18,2), xche_jdrq - xche_last_jdrq),0) end from work_cheliang_sm a,work_pz_gz b where a.che_no = b.che_no and a.che_no = '"
//						+ pz_.getChe_no() + "' and work_no='" + no + "'");
//		dao.execute(sql6);

		////////////////////合计金额计算///////////////////////////////////
		Sql sql1_1 = Sqls
				.create("update b set b.xche_rgf = a.xche_rgf,b.xche_rgbh=a.xche_rgf,b.xche_rgsl=0,xche_rgse=0 from work_pz_gz b,(select work_no,sum(wxxm_je) xche_rgf from work_mx_gz where work_no='"+num+"' and wxxm_zt in ('正常','保险') group by work_no) a   where b.work_no = '"+num+"' and a.work_no = b.work_no");
		dao.execute(sql1_1);			
		Sql sql1_2 = Sqls
				.create("update b set b.xche_clf = a.xche_clf,b.xche_clbh=a.xche_clf,b.xche_clsl=0,xche_clse=0 from work_pz_gz b,(select work_no,sum(peij_je) xche_clf from work_ll_gz where work_no='"+num+"' and peij_zt in ('正常','保险')group by work_no ) a   where b.work_no = '"+num+"' and a.work_no = b.work_no");
		dao.execute(sql1_2);
		Sql sql1_3 = Sqls
				.create("update work_pz_gz set xche_yhje = isnull(xche_wxxm_yhje,0)+isnull(xche_peij_yhje,0) where work_no = '"+num+"'");
		dao.execute(sql1_3);
		Sql sql1_4 = Sqls
				.create("update work_pz_gz set xche_hjje= isnull(xche_rgf,0) + isnull(xche_clf,0) where work_no = '"+num+"'");
		dao.execute(sql1_4);
		///////////////////////////////////////////////////////////////
		return jsons.json(1, 5, 1, "进厂成功");
	}

	/**
	 * 创建新的报价单
	 * 
	 * @param gongsiNo
	 *            公司 no
	 * @param caozuoyuan_xm
	 *            操作员姓名
	 * @param name
	 * @param dept
	 * @return boolean
	 */
	@At
	@Ok("raw:json")
	public String add(final String gongsiNo, final String caozuoyuan_xm) {
		if (gongsiNo == "" || caozuoyuan_xm == "") {
			return jsons.json(1, 0, 0, "");
		}
		// 新增单号
		dao.run(new ConnCallback() {
			@Override
			public void invoke(java.sql.Connection conn) throws Exception {
				CallableStatement cs = conn
						.prepareCall("{call sp_bslistnew (2021,?,?,?)}");
				cs.setString(1, gongsiNo);
				cs.setString(2, caozuoyuan_xm);
				cs.registerOutParameter(3, Types.VARCHAR);
				cs.executeUpdate();
				String orderNo = cs.getString(3);
				number = orderNo;
			}
		});
		if (number == "") {
			return jsons.json(1, 0, 0, "");
		}
		// 查询建表需要的内容
		List<feilvEntity> fe;
		List<feilvEntity> fei1 = dao.query(feilvEntity.class,
				Cnd.where("feil_mc", "=", "一级标准"));
		List<feilvEntity> fei = dao.query(feilvEntity.class,
				Cnd.where("feil_sy", "=", "1"));
		if (fei.size() != 0) {
			fe = dao.query(feilvEntity.class, Cnd.where("feil_sy", "=", "1"));
		} else if (fei1.size() != 0) {
			fe = dao.query(feilvEntity.class, Cnd.where("feil_mc", "=", "一级标准"));
		} else {
			fe = dao.query(feilvEntity.class,
					Cnd.where("feil_mc", "=", "一级标准"), new offsetPager(1, 1));
		}
		String mc = fe.get(0).getFeil_mc();
		double fl = fe.get(0).getFeil_fl();

		Sql sql = Sqls.create("update work_BaoJia_pz set list_czy = @name,"
				+ " dept_mc = @dept," + "list_jlrq = getdate(),"
				+ "list_sfbz = @feil_mc," + "List_sffl = @feil_fl  $condition");
		sql.params().set("name", caozuoyuan_xm);
		sql.params().set("dept", gongsiNo);
		sql.params().set("feil_mc", mc);
		sql.params().set("feil_fl", fl);
		sql.params().set("list_no", number);
		sql.setCondition(Cnd.wrap("list_no='" + number + "'"));
		dao.execute(sql);
		int sd = sql.getUpdateCount();
		if (sd != 0) {
			// List<baoJiaEntity> result = dao.query(baoJiaEntity.class,
			// Cnd.where("list_no", "=", number));
			return number;
			// String json = Json.toJson(result, JsonFormat.full());
			// if (result.size() != 0) {
			// return jsons.json(1, result.size(), 1, json);
			// }
			// return jsons.json(1, result.size(), 0, json);
			// } else {
			// return jsons.json(1, 0, 0, "");
		}
		return "";
	}

	/**
	 * 添加项目
	 * 
	 * @param xm
	 * @return
	 */
	@At
	public String tjxm(@Param("..") wxxmEntity xm) {
		wxxmEntity res = dao.insert(xm);
		res.toString();
		if (res.toString() != null) {
			return "成功！";
		}
		return "失败";
	}

	/**
	 * 添加基本信息
	 * 
	 * @param yuyue_no
	 * @return
	 */
	@At
	@Ok("raw:json")
	public int addjbxx(@Param("gongsiNo") final String gongsiNo,
			@Param("caozuoyuan_xm") final String caozuoyuan_xm,
			@Param("..") baoJiaEntity baojia) {
		String num = add(gongsiNo, caozuoyuan_xm);
		baojia.setList_no(num);
		int nu = dao.updateIgnoreNull(baojia);
		return nu;
	}

	/**
	 * 保存快速报价单
	 * 
	 * @param yuyue
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String addjb(@Param("..") baoJiaEntity yuyue) {
		System.out.println("=====================里程=============================="+yuyue.getList_yjjclc());
		baoJiaEntity bao = dao.fetch(baoJiaEntity.class, yuyue.getList_no());
		yuyue.setReco_no(bao.getReco_no());
		dao.update(yuyue,"^che_no|che_cx|che_vin|List_lc|kehu_mc|kehu_dh|List_sfbz|List_yjjclc|List_sffl|kehu_no|gcsj|list_hjje|list_hjje_yh$");
		Work_cheliang_smEntity che = pu.saveCheInfo(yuyue.getChe_no(), yuyue.getGcsj(), yuyue.getChe_cx(), yuyue.getChe_vin(),yuyue.getGongSiNo());
		pu.saveKeHu(che.getKehu_no(), yuyue.getKehu_mc(), yuyue.getKehu_dh());
		
//		Work_cheliang_smEntity ss = dao.fetch(Work_cheliang_smEntity.class, yuyue.getChe_no());
//		ss.setChe_gcrq(yuyue.getGcsj());
//		dao.update(ss);
		Sql sql = Sqls
				.create("update Work_BaoJia_pz set List_state = '1', List_progress ='未进店' where list_no='"
						+ yuyue.getList_no() + "'");
		dao.execute(sql);
		return yuyue.getList_no();
	}

	/**
	 * 添加维修项目
	 * 
	 * @param yuyue_no
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String addwxxm(String json) {
		System.out.println("=============="+json);
		JsonParser parse = new JsonParser(); // 创建json解析器
		try {
			JsonObject js = (JsonObject) parse.parse(json); // 创建jsonObject对象
			JsonArray array = js.get("data").getAsJsonArray();
			for (int i = 0; i < array.size(); i++) {
				wxxmEntity offer = new wxxmEntity();
				JsonObject subObject = array.get(i).getAsJsonObject();
				String nu = subObject.get("list_no").getAsString();
				offer.setList_no(subObject.get("list_no").getAsString());
				if (i == 0) {
					wxxmEntity ks = dao.fetch(wxxmEntity.class,
							Cnd.where("list_no", "=", nu));
					if (ks != null) {
						// dao.query(Work_yuyue_wxxmEntity.class,
						// Cnd.where("yuyue_no","=",nu));
						dao.clear(wxxmEntity.class,
								Cnd.where("list_no", "=", nu));
					}
				}
				offer.setWxxm_yje(subObject.get("wxxm_je").getAsDouble());
				offer.setWxxm_no(subObject.get("wxxm_no").getAsString());
				offer.setWxxm_mc(subObject.get("wxxm_mc").getAsString());
				offer.setWxxm_gs(subObject.get("wxxm_gs").getAsDouble());
				offer.setWxxm_je(subObject.get("wxxm_je").getAsDouble());
				if(offer.getWxxm_gs()==0){
					offer.setWxxm_dj(offer.getWxxm_je());
				}else{
					offer.setWxxm_dj(offer.getWxxm_je()/offer.getWxxm_gs());
				}
				//try catch不好使会出现失败时间2017年10月31日14:53:27 @author LHW
				/*try{
					offer.setWxxm_dj(offer.getWxxm_je()/offer.getWxxm_gs());
				}catch(java.lang.Exception e){
					
				}*/
				offer.setWxxm_zt(subObject.get("wxxm_zt").getAsString());
				offer.setWxxm_khgs(subObject.get("wxxm_gs").getAsDouble());
				wxxmEntity dd = dao.insert(offer);
				if (dd == null) {
					return "失败";
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "失败";
		}

		return "存档成功";
	}

	/**
	 * 添加材料
	 * 
	 * @param json
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String addcail(String json) {
		JsonParser parse = new JsonParser(); // 创建json解析器
		try {
			JsonObject js = (JsonObject) parse.parse(json); // 创建jsonObject对象
			JsonArray array = js.get("data").getAsJsonArray();
			for (int i = 0; i < array.size(); i++) {
				LLEntity yuyue = new LLEntity();
				JsonObject subObject = array.get(i).getAsJsonObject();
				String nu = subObject.get("list_no").getAsString();
				yuyue.setList_no(subObject.get("list_no").getAsString());
				if (i == 0) {
					LLEntity ks = dao.fetch(LLEntity.class,
							Cnd.where("list_no", "=", nu));
					if (ks != null) {
						dao.clear(LLEntity.class, Cnd.where("list_no", "=", nu));
					}
				}
				yuyue.setPeij_no(subObject.get("peij_no").getAsString());// 配件编码
				yuyue.setPeij_mc(subObject.get("peij_mc").getAsString());// 配件名称
				yuyue.setPeij_sl(subObject.get("peij_sl").getAsDouble());// 配件数量
				yuyue.setPeij_dj(subObject.get("peij_dj").getAsDouble());// 配件单价
				yuyue.setPeij_zt(subObject.get("peij_zt").getAsString());// 配件状态
				yuyue.setPeij_je(subObject.get("peij_je").getAsDouble());// 配件金额
				yuyue.setPeij_th(subObject.get("peij_th").getAsString());// 配件图号
				yuyue.setPeij_dw(subObject.get("peij_dw").getAsString());// 配件单位
				LLEntity dd = dao.insert(yuyue);
				if (dd == null) {
					return "失败";
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "失败";
		}
		return "存档成功";
	}

}
