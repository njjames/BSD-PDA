package org.aotu.VIPcard.module;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.util.Date;
import java.util.List;

import org.aotu.Jsons;
import org.aotu.VIPcard.entity.CardKindEntity;
import org.aotu.VIPcard.entity.CardKindPeij;
import org.aotu.VIPcard.entity.Cardservice;
import org.aotu.VIPcard.entity.KehuCardCheEntity;
import org.aotu.VIPcard.entity.KehuCarddetail;
import org.aotu.VIPcard.entity.KehuCarddetailpeij;
import org.aotu.VIPcard.entity.Kehu_CardEntity;
import org.aotu.publics.eneity.KehuEntity;
import org.aotu.publics.eneity.Work_cheliang_smEntity;
import org.nutz.dao.Cnd;
import org.nutz.dao.Dao;
import org.nutz.dao.DaoException;
import org.nutz.dao.Sqls;
import org.nutz.dao.entity.Record;
import org.nutz.dao.pager.Pager;
import org.nutz.dao.sql.Sql;
import org.nutz.dao.util.cri.SqlExpressionGroup;
import org.nutz.img.Images;
import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.json.Json;
import org.nutz.json.JsonFormat;
import org.nutz.lang.Strings;
import org.nutz.lang.random.StringGenerator;
import org.nutz.mvc.Mvcs;
import org.nutz.mvc.Scope;
import org.nutz.mvc.annotation.AdaptBy;
import org.nutz.mvc.annotation.At;
import org.nutz.mvc.annotation.Attr;
import org.nutz.mvc.annotation.Ok;
import org.nutz.mvc.annotation.Param;
import org.nutz.mvc.impl.AdaptorErrorContext;
import org.nutz.mvc.upload.TempFile;
import org.nutz.mvc.upload.UploadAdaptor;

@IocBean
@At("/card")
public class card {
	@Inject
	Dao dao;

	@Inject
	Jsons jsons;

	/**
	 * 已收款会员
	 * 
	 * @param pageNumber
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String CardXxy(int pageNumber, String card_no, String cardkind) {
		Pager pager = dao.createPager(pageNumber, 20);
		Cnd cnd = Cnd.where("flag_shoukuan", "=", "1");
		if (card_no != null){

			System.out.println("-----------------");
			SqlExpressionGroup c = Cnd.exps("card_no", "like", "%" + card_no + "%").or("kehu_sj", "like", "%" + card_no + "%");
			System.out.println(c.toString());
			cnd.and(c);			
			
			
//			cnd.and("card_no", "like", "%" + card_no + "%");
//			cnd.or("kehu_sj", "like", "%" + card_no + "%");
		}
		if (cardkind != null)
			cnd.and("card_kind", "like", "%" + cardkind + "%");
		List<Kehu_CardEntity> result = dao.query(Kehu_CardEntity.class, cnd.desc("id"),pager);
		String json = Json.toJson(result, JsonFormat.full());
		if (result.size() != 0) {
			return jsons.json(1, result.size(), 1, json);
		}
		return jsons.json(1, result.size(), 0, json);
	}

	/**
	 * 未收款会员
	 * 
	 * @param pageNumber
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String CardXxn(int pageNumber, String card_no, String cardkind) {
		Pager pager = dao.createPager(pageNumber, 20);
		Cnd cnd = Cnd.where("flag_shoukuan", "=", "0");
		if (card_no != null){
			System.out.println("-----------------");
			SqlExpressionGroup c = Cnd.exps("card_no", "like", "%" + card_no + "%").or("kehu_sj", "like", "%" + card_no + "%");
			System.out.println(c.toString());
			cnd.and(c);
		}
		if (cardkind != null)
			cnd.and("card_kind", "like", "%" + cardkind + "%");
		List<Kehu_CardEntity> result = dao.query(Kehu_CardEntity.class, cnd.desc("id"),pager);
		String json = Json.toJson(result, JsonFormat.full());
		if (result.size() != 0) {
			return jsons.json(1, result.size(), 1, json);
		}
		return jsons.json(1, result.size(), 0, json);
	}

	public Kehu_CardEntity getVipCard(String card_no, String pass) {
		return dao.fetch(
				Kehu_CardEntity.class,
				Cnd.where("card_no", "=", card_no).and("card_password", "=",
						pass));
	}

	public Kehu_CardEntity getVipCard(String card_no) {
		return dao.fetch(Kehu_CardEntity.class, card_no);
	}

	/**
	 * 根据卡号获取卡信息
	 * 
	 * @param card_no
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String getVipCardByCardNo(String card_no) {
		Kehu_CardEntity kehuCard = getVipCard(card_no);
		if (kehuCard != null) {
			if (kehuCard.isFlag_use()) {
				return jsons.json(1, 1, 0, "此卡号已经禁用！");
			}
			if (kehuCard.isFlag_guashi()) {
				return jsons.json(1, 1, 0, "此卡号已经挂失！");
			}
			if (kehuCard.isFlag_enddate()) {
				return jsons.json(1, 1, 0, "此卡号已经到期！");
			}
			if (card_no != null && card_no.length() > 1) {
				Sql sql_ = Sqls.queryRecord("SELECT isnull(flag_single,0) as flag_single  FROM cardsysset ");
				dao.execute(sql_);
				List<Record> res_1 = sql_.getList(Record.class);
				String flag_single = res_1.get(0).getString("flag_single");
				System.out.println(flag_single);
				if("true".equals(flag_single)){
					Sql sql1 = Sqls
							.queryRecord("select count(*) as cnt from kehu_card a, kehu_card_che b where a.card_no = b.card_no and flag_use  = 0 and flag_guashi = 0 and flag_enddate = 0 and isnull(flag_shoukuan,0) = 1 and b.card_no = '"
									+ card_no + "' and b.che_no ='" + card_no + "'");
					dao.execute(sql1);
					List<Record> res1 = sql1.getList(Record.class);
					int cnt = res1.get(0).getInt("cnt");
					if (cnt == 0)  
						return jsons.json(1, 1, 0,
								"系统设置为“关联式会员制度”，此会员卡非该辆车所有,不符合条件。不能结算");
				}
			}
		}
		Sql sql1 = Sqls
				.queryRecord("select CardKind.ItemRate,CardKind.PeijRate,card_leftje from kehu_card ,CardKind where kehu_card.card_no ='"
						+ card_no + "' and card_kind = CardKind.cardkind;");
		dao.execute(sql1);
		List<Record> res1 = sql1.getList(Record.class);
		String json = Json.toJson(res1, JsonFormat.full());
		return jsons.json(1, 1, 1, json);
	}

	/**
	 * 获取卡信息
	 * 
	 * @param card_no
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String getvipCard(String card_no, String che_no) {
		Kehu_CardEntity kehuCard = getVipCard(card_no);
		if (kehuCard != null) {
			if (kehuCard.isFlag_use()) {
				return jsons.json(1, 1, 0, "此卡号已经禁用！");
			}
			if (kehuCard.isFlag_guashi()) {
				return jsons.json(1, 1, 0, "此卡号已经挂失！");
			}
			if (kehuCard.isFlag_enddate()) {
				return jsons.json(1, 1, 0, "此卡号已经到期！");
			}
			if (che_no != null && che_no.length() > 1) {
				Sql sql1 = Sqls
						.queryRecord("select count(*) as cnt from kehu_card a, kehu_card_che b where a.card_no = b.card_no and flag_use  = 0 and flag_guashi = 0 and flag_enddate = 0 and isnull(flag_shoukuan,0) = 1 and b.card_no = '"
								+ card_no + "' and b.che_no ='" + che_no + "'");
				dao.execute(sql1);
				List<Record> res1 = sql1.getList(Record.class);
				int cnt = res1.get(0).getInt("cnt");
				if (cnt == 0)  
					return jsons.json(1, 1, 0,
							"系统设置为“关联式会员制度”，此会员卡非该辆车所有,不符合条件。不能结算");
			}
			String json = Json.toJson(kehuCard, JsonFormat.full());
			return jsons.json(1, 1, 1, json);
		}
		return jsons.json(1, 1, 0, "会员卡不存在");
	}

	/**
	 * 根据车牌查询会员信息
	 * 
	 * @param che_no
	 * @param kehu_mc
	 * @param card_no
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String getUserCardByCheNo(String che_no, String card_no) {
		Cnd cnd = Cnd.where("1", "=", "1");
		if (card_no != null)
			cnd.and("card_no", "like", "%" + card_no + "%");
		if (che_no != null)
			cnd.and("che_no", "=", che_no);
		Kehu_CardEntity chad = dao.fetch(Kehu_CardEntity.class, cnd);
		if (chad != null) {
			String json = Json.toJson(chad, JsonFormat.full());
			return jsons.json(1, 1, 1, json);
		} else {
			return jsons.json(1, 1, 0, "会员卡不存在！");
		}
	}

	@At
	@Ok("raw:json")
	public String getkehuByCheNo(String che_no){
		Sql sql1 = Sqls
				.queryRecord("select a.kehu_no,a.kehu_mc,a.kehu_birthday,a.kehu_dh,a.kehu_sj,a.kehu_xm,a.kehu_dz,a.kehu_Birthday from kehu  a  left join work_cheliang_sm  b on  a.kehu_no = b.kehu_no  where b.che_no = '"+che_no+"'");
		dao.execute(sql1);
		List<Record> res1 = sql1.getList(Record.class);
		if(res1.size()<1)
			return jsons.json(1, 1, 0, "查询失败");
		String json = Json.toJson(res1, JsonFormat.full());
		return jsons.json(1, 1, 1, json);
	}
	/**
	 * 添加会员
	 * 
	 * @param kehu
	 * @return
	 */
	@At
	@Ok("raw:json")
	public boolean add(@Param("..") Kehu_CardEntity kehu) {
		System.out.println("======================");
		System.out.println(kehu.getCard_ysje());//, //--开户金额
		System.out.println(kehu.getCard_ssje());// , // --实收金额
		System.out.println(kehu.getCard_addje());//, --可用金额
		System.out.println(kehu.getCard_cs());//,--普洗次数
		System.out.println(kehu.getCard_cs_jx());//,--精洗次数
		System.out.println("======================");
		// 客户车辆关联对象
		KehuCardCheEntity kehuCard = new KehuCardCheEntity();
		// 会员信息查询处理
		KehuEntity kehuInfo = null;
		if (kehu.getChe_no() != null && kehu.getChe_no().length() > 0) {
			Work_cheliang_smEntity che = dao.fetch(
					Work_cheliang_smEntity.class,
					Cnd.where("che_no", "=", kehu.getChe_no()));
			if (che != null) {
				kehuCard.setChe_no(che.getChe_no());
				kehuCard.setChe_cx(che.getChe_cx());
				kehuInfo = dao.fetch(KehuEntity.class,
						Cnd.where("kehu_no", "=", che.getKehu_no()));
			}
		}
		// 生成一个卡号，后期修改
		StringGenerator sg = new StringGenerator(20, 20);
		String cardNo = sg.next();
		kehu.setCard_no(cardNo);
		kehu.setFlag_shoukuan(0);
		Date date = new Date();
		kehu.setCard_jlrq(date);
		kehu.setFlag_use(true);
		kehu.setFlag_guashi(true);
		kehu.setFlag_enddate(true);

		kehu.setFlag_shoukuan(0);
		// 查询是否存在卡
//		CardKindEntity card = dao.fetch(CardKindEntity.class,
//				Cnd.where("CardKind", "=", kehu.getCard_kind()));
//		if (card != null) {
//			kehu.setCard_cs_jx(card.getCard_cs_jx());
//			kehu.setCard_cs(card.getCard_cs_px());
//			// java.util.Calendar rightNow = java.util.Calendar.getInstance();
//			// rightNow.add(java.util.Calendar.DAY_OF_YEAR, card.getCard_yxq());
//			// kehu.setCard_enddate(rightNow.getTime());
//			kehu.setCard_enddate(kehu.getCard_enddate());
//			kehu.setCard_addje(card.getCard_addje());
//			kehu.setCard_ysje(card.getCard_khje());
//			kehu.setCard_cs_jx(card.getCard_cs_jx());
//		}
		// if (kehuInfo != null) {
		// kehu.setKehu_sj(kehuInfo.getKehu_sj());
		// kehu.setKehu_dh(kehuInfo.getKehu_dh());
		// kehu.setKehu_xm(kehuInfo.getKehu_xm());
		// kehu.setKehu_mc(kehuInfo.getKehu_mc());
		// kehu.setKehu_no(kehuInfo.getKehu_no());
		// }
		kehu.setFlag_use(false);
		kehu.setFlag_guashi(false);
		kehu.setFlag_enddate(false);
		kehu.setFlag_shoukuan(0);
		System.out.println(kehu.getKehu_dh() + "=========================="
				+ kehu.getKehu_mc());
		Kehu_CardEntity result = dao.insert(kehu);
		// 插入客户车辆关联信息
		kehuCard.setCard_no(cardNo);
		dao.insert(kehuCard);
		// 更新第一个材料表
		List<Cardservice> list_cardservice = dao.query(Cardservice.class,
				Cnd.where("cardkind", "=", kehu.getCard_kind()));
		for (Cardservice cardservice : list_cardservice) {
			KehuCarddetail kehuCardDetail = new KehuCarddetail();
			kehuCardDetail.setChe_no(kehu.getChe_no());
			kehuCardDetail.setCard_no(cardNo);
			kehuCardDetail.setWxxm_no(cardservice.getWxxm_no());
			kehuCardDetail.setWxxm_mc(cardservice.getWxxm_mc());
			kehuCardDetail.setWxxm_gs(cardservice.getWxxm_gs());
			kehuCardDetail.setWxxm_cs(cardservice.getWxxm_cs());
			kehuCardDetail.setWxxm_je(cardservice.getWxxm_je());
			kehuCardDetail.setWxxm_yqcs(0);
			kehuCardDetail.setDate_create(new Date());
			dao.insert(kehuCardDetail);
		}
		// 更新第二个项目表
		List<CardKindPeij> list_CardKindPeij = dao.query(CardKindPeij.class,
				Cnd.where("cardkind", "=", kehu.getCard_kind()));
		for (CardKindPeij cardKindPeij : list_CardKindPeij) {
			KehuCarddetailpeij kehuCarddetailpeij = new KehuCarddetailpeij();
			kehuCarddetailpeij.setChe_no(kehu.getChe_no());
			kehuCarddetailpeij.setCard_no(cardNo);
			kehuCarddetailpeij.setPeij_no(cardKindPeij.getPeij_no());
			kehuCarddetailpeij.setPeij_th(cardKindPeij.getPeij_th());
			kehuCarddetailpeij.setPeij_mc(cardKindPeij.getPeij_mc());
			kehuCarddetailpeij.setPeij_dw(cardKindPeij.getPeij_dw());
			kehuCarddetailpeij.setPeij_cx(cardKindPeij.getPeij_cx());
			kehuCarddetailpeij.setPeij_pp(cardKindPeij.getPeij_pp());
			kehuCarddetailpeij.setPeij_jk(cardKindPeij.getPeij_jk());
			kehuCarddetailpeij.setPeij_cd(cardKindPeij.getPeij_cd());
			kehuCarddetailpeij.setPeij_dj(cardKindPeij.getPeij_dj());
			kehuCarddetailpeij.setPeij_remark(cardKindPeij.getPeij_remark());
			kehuCarddetailpeij.setPeij_card_sl(cardKindPeij.getPeij_card_sl());
			kehuCarddetailpeij.setDate_create(new Date());

			dao.insert(kehuCarddetailpeij);

		}

		Sql sql1 = Sqls
				.create("update kehu_card set card_yhje= isnull(card_ysje,0)-isnull(card_ssje,0), card_useje=0,card_leftje= card_addje,card_usejf=0 ,card_leftjf = card_jifen,card_usecs_jx=0,card_leftcs_jx= isnull(card_cs_jx,0),   card_usecs_px=0,card_leftcs_px= isnull(card_cs,0) where card_no = '"
						+ cardNo + "'");
		dao.execute(sql1);
		if (result != null) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * 卡信息
	 * 
	 * @return
	 */
	@At
	@Ok("raw:json")
	public String kxx() {
		List<CardKindEntity> result = dao.query(CardKindEntity.class, null);

		String json = Json.toJson(result, JsonFormat.full());
		if (result.size() != 0) {
			return jsons.json(1, result.size(), 1, json);
		}
		return jsons.json(1, result.size(), 0, json);

	}
	

}
